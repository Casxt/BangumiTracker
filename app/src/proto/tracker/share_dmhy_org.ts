/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: tracker/share_dmhy_org.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SHARE_DMHY_ORG_TRACKER extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        configs?: SHARE_DMHY_ORG_TRACKER_CONFIG[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("configs" in data && data.configs != undefined) {
                this.configs = data.configs;
            }
        }
    }
    get configs() {
        return pb_1.Message.getRepeatedWrapperField(this, SHARE_DMHY_ORG_TRACKER_CONFIG, 1) as SHARE_DMHY_ORG_TRACKER_CONFIG[];
    }
    set configs(value: SHARE_DMHY_ORG_TRACKER_CONFIG[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        configs?: ReturnType<typeof SHARE_DMHY_ORG_TRACKER_CONFIG.prototype.toObject>[];
    }): SHARE_DMHY_ORG_TRACKER {
        const message = new SHARE_DMHY_ORG_TRACKER({});
        if (data.configs != null) {
            message.configs = data.configs.map(item => SHARE_DMHY_ORG_TRACKER_CONFIG.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            configs?: ReturnType<typeof SHARE_DMHY_ORG_TRACKER_CONFIG.prototype.toObject>[];
        } = {};
        if (this.configs != null) {
            data.configs = this.configs.map((item: SHARE_DMHY_ORG_TRACKER_CONFIG) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.configs.length)
            writer.writeRepeatedMessage(1, this.configs, (item: SHARE_DMHY_ORG_TRACKER_CONFIG) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SHARE_DMHY_ORG_TRACKER {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SHARE_DMHY_ORG_TRACKER();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SHARE_DMHY_ORG_TRACKER_CONFIG.deserialize(reader), SHARE_DMHY_ORG_TRACKER_CONFIG));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SHARE_DMHY_ORG_TRACKER {
        return SHARE_DMHY_ORG_TRACKER.deserialize(bytes);
    }
}
export class SHARE_DMHY_ORG_TRACKER_CONFIG extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        bangumi_id?: number;
        rss_url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("bangumi_id" in data && data.bangumi_id != undefined) {
                this.bangumi_id = data.bangumi_id;
            }
            if ("rss_url" in data && data.rss_url != undefined) {
                this.rss_url = data.rss_url;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get bangumi_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set bangumi_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get rss_url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set rss_url(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        key?: string;
        bangumi_id?: number;
        rss_url?: string;
    }): SHARE_DMHY_ORG_TRACKER_CONFIG {
        const message = new SHARE_DMHY_ORG_TRACKER_CONFIG({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.bangumi_id != null) {
            message.bangumi_id = data.bangumi_id;
        }
        if (data.rss_url != null) {
            message.rss_url = data.rss_url;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            bangumi_id?: number;
            rss_url?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.bangumi_id != null) {
            data.bangumi_id = this.bangumi_id;
        }
        if (this.rss_url != null) {
            data.rss_url = this.rss_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.bangumi_id != 0)
            writer.writeUint64(2, this.bangumi_id);
        if (this.rss_url.length)
            writer.writeString(3, this.rss_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SHARE_DMHY_ORG_TRACKER_CONFIG {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SHARE_DMHY_ORG_TRACKER_CONFIG();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.bangumi_id = reader.readUint64();
                    break;
                case 3:
                    message.rss_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SHARE_DMHY_ORG_TRACKER_CONFIG {
        return SHARE_DMHY_ORG_TRACKER_CONFIG.deserialize(bytes);
    }
}
